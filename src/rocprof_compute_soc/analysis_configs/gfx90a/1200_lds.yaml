---
# Add description/tips for each metric in this section.
# So it could be shown in hover.
Metric Description:
  Speed-of-Light:
    Utilization: &SoL_Utilization_desc >-
      Indicates what percent of the kernel's duration the LDS was actively executing instructions
      (including, but not limited to, load, store, atomic and HIP's ``__shfl`` operations).
      Calculated as the ratio of the total number of cycles LDS was active over the total CU cycles.
    Access Rate: &SoL_Access_Rate_desc >-
      Indicates the percentage of SIMDs in the VALU actively issuing LDS instructions, averaged over
      the lifetime of the kernel. Calculated as the ratio of the total number of cycles spent by the
      scheduler issuing LDS instructions over the total CU cycles.
    Theoretical Bandwidth: &SoL_Theoretical_Bandwidth_desc >-
      Indicates the maximum amount of bytes that could have been loaded from, stored to, or
      atomically updated in the LDS in this kernel, as a percent of the peak LDS bandwidth
      achievable. See the LDS bandwidth example for more detail.
    Bank Conflict Rate: &SoL_Bank_Conflict_Rate_desc >-
      Indicates the percentage of active LDS cycles that were spent servicing bank conflicts.
      Calculated as the ratio of LDS cycles spent servicing bank conflicts over the number of LDS
      cycles that would have been required to move the same amount of data in an uncontended access.
  LDS Stats:
    LDS Instructions: &LDS_Instructions_desc >-
      The total number of LDS instructions (including, but not limited to, read/write/atomics and
      HIP's ``__shfl`` instructions) executed per normalization unit.
    Theoretical Bandwidth: &Theoretical_Bandwidth_desc >-
      Indicates the maximum amount of bytes that could have been loaded from, stored to, or
      atomically updated in the LDS per normalization unit. Does not take into account the
      execution mask of the wavefront when the instruction was executed.
    LDS Latency: &LDS_Latency_desc >-
      The average number of round-trip cycles (i.e., from issue to data-return / acknowledgment)
      required for an LDS instruction to complete.
    Bank Conflicts/Access: &Bank_Conflicts_Access_desc >-
      The ratio of the number of cycles spent in the LDS scheduler due to bank conflicts (as
      determined by the conflict resolution hardware) to the base number of cycles that would be
      spent in the LDS scheduler in a completely uncontended case. This is the unnormalized form of
      the Bank Conflict Rate.
    Index Accesses: &Index_Accesses_desc >-
      The total number of cycles spent in the LDS scheduler over all operations per normalization
      unit.
    Atomic Return Cycles: &Atomic_Return_Cycles_desc >-
      The total number of cycles spent on LDS atomics with return per normalization unit.
    Bank Conflicts: &Bank_Conflicts_desc >-
      The total number of cycles spent in the LDS scheduler due to bank conflicts (as determined by
      the conflict resolution hardware) per normalization unit.
    Address Conflicts: &Address_Conflicts_desc >-
      The total number of cycles spent in the LDS scheduler due to address conflicts (as determined
      by the conflict resolution hardware) per normalization unit.
    Unaligned Stall: &Unaligned_Stall_desc >-
      The total number of cycles spent in the LDS scheduler due to stalls from non-dword aligned
      addresses per normalization unit.
    Memory Violations: &Memory_Violations_desc >-
      The total number of out-of-bounds accesses made to the LDS, per normalization unit. This is
      unused and expected to be zero in most configurations for modern CDNAâ„¢ accelerators.

# Define the panel properties and properties of each metric in the panel.
Panel Config:
  id: 1200
  title: Local Data Share (LDS)
  data source:
    - metric_table:
        id: 1201
        title: Speed-of-Light
        header:
          metric: Metric
          value: Avg
          unit: Unit
          tips: Tips
        metric:
          Utilization:
            value: AVG(((100 * SQ_LDS_IDX_ACTIVE) / ($GRBM_GUI_ACTIVE_PER_XCD * $cu_per_gpu)))
            unit: Pct of Peak
            tips: *SoL_Utilization_desc
          Access Rate:
            value: AVG(((200 * SQ_ACTIVE_INST_LDS) / ($GRBM_GUI_ACTIVE_PER_XCD * $cu_per_gpu)))
            unit: Pct of Peak
            tips: *SoL_Access_Rate_desc
          Theoretical Bandwidth:
            value: AVG((((((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) * 4) * TO_INT($lds_banks_per_cu))
              / (End_Timestamp - Start_Timestamp)) / (($max_sclk * $cu_per_gpu) * 0.00128)))
            unit: Pct of Peak
            tips: *SoL_Theoretical_Bandwidth_desc
          Bank Conflict Rate:
            value: AVG((((SQ_LDS_BANK_CONFLICT * 3.125) / (SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT))
              if ((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) != 0) else None))
            unit: Pct of Peak
            tips: *SoL_Bank_Conflict_Rate_desc
        comparable: false # for now
        cli_style: simple_bar

    - metric_table:
        id: 1202
        title: LDS Stats
        header:
          metric: Metric
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        metric:
          LDS Instrs:
            avg: AVG((SQ_INSTS_LDS / $denom))
            min: MIN((SQ_INSTS_LDS / $denom))
            max: MAX((SQ_INSTS_LDS / $denom))
            unit: (Instr  + $normUnit)
            tips: *LDS_Instructions_desc
          Theoretical Bandwidth:
            avg: AVG(((((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) * 4) * TO_INT($lds_banks_per_cu))
              / $denom))
            min: MIN(((((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) * 4) * TO_INT($lds_banks_per_cu))
              / $denom))
            max: MAX(((((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) * 4) * TO_INT($lds_banks_per_cu))
              / $denom))
            unit: (Bytes  + $normUnit)
            tips: *Theoretical_Bandwidth_desc
          LDS Latency:
            avg: AVG(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_LDS) if (SQ_INSTS_LDS != 0) else None))
            min: MIN(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_LDS) if (SQ_INSTS_LDS != 0) else None))
            max: MAX(((SQ_ACCUM_PREV_HIRES / SQ_INSTS_LDS) if (SQ_INSTS_LDS != 0) else None))
            unit: Cycles
            coll_level: SQ_INST_LEVEL_LDS
            tips: *LDS_Latency_desc
          Bank Conflicts/Access:
            avg: AVG(((SQ_LDS_BANK_CONFLICT / (SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT))
              if ((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) != 0) else None))
            min: MIN(((SQ_LDS_BANK_CONFLICT / (SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT))
              if ((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) != 0) else None))
            max: MAX(((SQ_LDS_BANK_CONFLICT / (SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT))
              if ((SQ_LDS_IDX_ACTIVE - SQ_LDS_BANK_CONFLICT) != 0) else None))
            unit: Conflicts/Access
            tips: *Bank_Conflicts_Access_desc
          Index Accesses:
            avg: AVG((SQ_LDS_IDX_ACTIVE / $denom))
            min: MIN((SQ_LDS_IDX_ACTIVE / $denom))
            max: MAX((SQ_LDS_IDX_ACTIVE / $denom))
            unit: (Cycles  + $normUnit)
            tips: *Index_Accesses_desc
          Atomic Return Cycles:
            avg: AVG((SQ_LDS_ATOMIC_RETURN / $denom))
            min: MIN((SQ_LDS_ATOMIC_RETURN / $denom))
            max: MAX((SQ_LDS_ATOMIC_RETURN / $denom))
            unit: (Cycles  + $normUnit)
            tips: *Atomic_Return_Cycles_desc
          Bank Conflict:
            avg: AVG((SQ_LDS_BANK_CONFLICT / $denom))
            min: MIN((SQ_LDS_BANK_CONFLICT / $denom))
            max: MAX((SQ_LDS_BANK_CONFLICT / $denom))
            unit: (Cycles  + $normUnit)
            tips: *Bank_Conflicts_desc
          Addr Conflict:
            avg: AVG((SQ_LDS_ADDR_CONFLICT / $denom))
            min: MIN((SQ_LDS_ADDR_CONFLICT / $denom))
            max: MAX((SQ_LDS_ADDR_CONFLICT / $denom))
            unit: (Cycles  + $normUnit)
            tips: *Address_Conflicts_desc
          Unaligned Stall:
            avg: AVG((SQ_LDS_UNALIGNED_STALL / $denom))
            min: MIN((SQ_LDS_UNALIGNED_STALL / $denom))
            max: MAX((SQ_LDS_UNALIGNED_STALL / $denom))
            unit: (Cycles  + $normUnit)
            tips: *Unaligned_Stall_desc
          Mem Violations:
            avg: AVG((SQ_LDS_MEM_VIOLATIONS / $denom))
            min: MIN((SQ_LDS_MEM_VIOLATIONS / $denom))
            max: MAX((SQ_LDS_MEM_VIOLATIONS / $denom))
            unit: (Accesses + $normUnit)
            tips: *Memory_Violations_desc
