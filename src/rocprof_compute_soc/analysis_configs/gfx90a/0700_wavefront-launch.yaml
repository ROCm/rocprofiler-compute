---
# Add description/tips for each metric in this section.
# So it could be shown in hover.
Metric Description:
  Wavefront Launch Stats:
    Grid Size: &Grid_Size_desc >-
      The total number of work-items (or, threads) launched as a part of the kernel dispatch. In
      HIP, this is equivalent to the total grid size multiplied by the total workgroup (or, block)
      size.
    Workgroup Size: &Workgroup_Size_desc >-
      The total number of work-items (or, threads) in each workgroup (or, block) launched as part of
      the kernel dispatch. In HIP, this is equivalent to the total block size.
    Total Wavefronts: &Total_Wavefronts_desc >-
      The total number of wavefronts launched as part of the kernel dispatch. On AMD Instinct™ CDNA™
      accelerators and GCN™ GPUs, the wavefront size is always 64 work-items. Thus, the total
      number of wavefronts should be equivalent to the ceiling of grid size divided by 64.
    Saved Wavefronts: &Saved_Wavefronts_desc >-
      The total number of wavefronts saved at a context-save.
    Restored Wavefronts: &Restored_Wavefronts_desc >-
      The total number of wavefronts restored from a context-save.
    VGPRs: &VGPRs_desc >-
      The number of architected vector general-purpose registers allocated for the kernel, see VALU.
      Note: this may not exactly match the number of VGPRs requested by the compiler due to
      allocation granularity.
    AGPRs: &AGPRs_desc >-
      The number of accumulation vector general-purpose registers allocated for the kernel, see
      AGPRs. Note: this may not exactly match the number of AGPRs requested by the compiler due to
      allocation granularity.
    SGPRs: &SGPRs_desc >-
      The number of scalar general-purpose registers allocated for the kernel, see SALU. Note: this
      may not exactly match the number of SGPRs requested by the compiler due to allocation
      granularity.
    LDS Allocation: &LDS_Allocation_desc >-
      The number of bytes of LDS memory (or, shared memory) allocated for this kernel. Note: This
      may also be larger than what was requested at compile time due to both allocation granularity
      and dynamic per-dispatch LDS allocations.
    Scratch Allocation: &Scratch_Allocation_desc >-
      The number of bytes of scratch memory requested per work-item for this kernel. Scratch memory
      is used for stack memory on the accelerator, as well as for register spills and restores.
  Wavefront Runtime Stats:
    Kernel Time: &Kernel_Time_desc >-
      The total duration of the executed kernel. Note: this should not be directly compared to the
      wavefront cycles / timings below.
    Kernel Cycles: &Kernel_Cycles_desc >-
      The total duration of the executed kernel in cycles. Note: this should not be directly
      compared to the wavefront cycles / timings below.
    Instructions Per Wavefront: &Instructions_Per_Wavefront_desc >-
      The average number of instructions (of all types) executed per wavefront. This is averaged
      over all wavefronts in a kernel dispatch.
    Wave Cycles: &Wave_Cycles_desc >-
      The number of cycles a wavefront in the kernel dispatch spent resident on a compute unit per
      normalization unit. This is averaged over all wavefronts in a kernel dispatch. Note: this
      should not be directly compared to the kernel cycles above.
    Dependency Wait Cycles: &Dependency_Wait_Cycles_desc >-
      The number of cycles a wavefront in the kernel dispatch stalled waiting on memory of any kind
      (e.g., instruction fetch, vector or scalar memory, etc.) per normalization unit. This counter
      is incremented at every cycle by *all* wavefronts on a CU stalled at a memory operation. As
      such, it is most useful to get a sense of how waves were spending their time, rather than
      identification of a precise limiter because another wave could be actively executing while a
      wave is stalled. The sum of this metric, Issue Wait Cycles and Active Cycles should be equal
      to the total Wave Cycles metric.
    Issue Wait Cycles: &Issue_Wait_Cycles_desc >-
      The number of cycles a wavefront in the kernel dispatch was unable to issue an instruction for
      any reason (for example, execution pipe back-pressure, arbitration loss, and so on) per
      normalization unit. This counter is incremented at every cycle by all wavefronts on a CU
      unable to issue an instruction. As such, it is most useful to get a sense of how waves were
      spending their time, rather than identification of a precise limiter because another wave
      could be actively executing while a wave is issue stalled. The sum of this metric, Dependency
      Wait Cycles and Active Cycles should be equal to the total Wave Cycles metric.
    Active Cycles: &Active_Cycles_desc >-
      The average number of cycles a wavefront in the kernel dispatch was actively executing
      instructions per normalization unit. This measurement is made on a per-wavefront basis, and
      may include cycles that another wavefront spent actively executing (on another execution unit,
      for example) or was stalled. As such, it is most useful to get a sense of how waves were
      spending their time, rather than identification of a precise limiter. The sum of this metric,
      Issue Wait Cycles and Active Wait Cycles should be equal to the total Wave Cycles metric.
    Wavefront Occupancy: &Wavefront_Occupancy_desc >-
      The time-averaged number of wavefronts resident on the accelerator over the lifetime of the
      kernel. Note: this metric may be inaccurate for short-running kernels (less than 1ms).

# Define the panel properties and properties of each metric in the panel.
Panel Config:
  id: 700
  title: Wavefront
  data source:
    - metric_table:
        id: 701
        title: Wavefront Launch Stats
        header:
          metric: Metric
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        metric:
          Grid Size:
            avg: AVG(Grid_Size)
            min: MIN(Grid_Size)
            max: MAX(Grid_Size)
            unit: Work Items
            tips: *Grid_Size_desc
          Workgroup Size:
            avg: AVG(Workgroup_Size)
            min: MIN(Workgroup_Size)
            max: MAX(Workgroup_Size)
            unit: Work Items
            tips: *Workgroup_Size_desc
          Total Wavefronts:
            avg: AVG(SPI_CSN_WAVE)
            min: MIN(SPI_CSN_WAVE)
            max: MAX(SPI_CSN_WAVE)
            unit: Wavefronts
            tips: *Total_Wavefronts_desc
          Saved Wavefronts:
            avg: AVG(SQ_WAVES_SAVED)
            min: MIN(SQ_WAVES_SAVED)
            max: MAX(SQ_WAVES_SAVED)
            unit: Wavefronts
            tips: *Saved_Wavefronts_desc
          Restored Wavefronts:
            avg: AVG(SQ_WAVES_RESTORED)
            min: MIN(SQ_WAVES_RESTORED)
            max: MAX(SQ_WAVES_RESTORED)
            unit: Wavefronts
            tips: *Restored_Wavefronts_desc
          VGPRs:
            avg: AVG(Arch_VGPR)
            min: MIN(Arch_VGPR)
            max: MAX(Arch_VGPR)
            unit: Registers
            tips: *VGPRs_desc
          AGPRs:
            avg: AVG(Accum_VGPR)
            min: MIN(Accum_VGPR)
            max: MAX(Accum_VGPR)
            unit: Registers
            tips: *AGPRs_desc
          SGPRs:
            avg: AVG(SGPR)
            min: MIN(SGPR)
            max: MAX(SGPR)
            unit: Registers
            tips: *SGPRs_desc
          LDS Allocation:
            avg: AVG(LDS_Per_Workgroup)
            min: MIN(LDS_Per_Workgroup)
            max: MAX(LDS_Per_Workgroup)
            unit: Bytes
            tips: *LDS_Allocation_desc
          Scratch Allocation:
            avg: AVG(Scratch_Per_Workitem)
            min: MIN(Scratch_Per_Workitem)
            max: MAX(Scratch_Per_Workitem)
            unit: Bytes/Workitem
            tips: *Scratch_Allocation_desc

    - metric_table:
        id: 702
        title: Wavefront Runtime Stats
        header:
          metric: Metric
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        metric:
          Kernel Time (Nanosec):
            avg: AVG((End_Timestamp - Start_Timestamp))
            min: MIN((End_Timestamp - Start_Timestamp))
            max: MAX((End_Timestamp - Start_Timestamp))
            unit: ns
            tips: *Kernel_Time_desc
          Kernel Time (Cycles):
            avg: AVG($GRBM_GUI_ACTIVE_PER_XCD)
            min: MIN($GRBM_GUI_ACTIVE_PER_XCD)
            max: MAX($GRBM_GUI_ACTIVE_PER_XCD)
            unit: Cycle
            tips: *Kernel_Cycles_desc
          Instructions per wavefront:
            avg: AVG((SQ_INSTS / SQ_WAVES))
            min: MIN((SQ_INSTS / SQ_WAVES))
            max: MAX((SQ_INSTS / SQ_WAVES))
            unit: Instr/wavefront
            tips: *Instructions_Per_Wavefront_desc
          Wave Cycles:
            avg: AVG(((4 * SQ_WAVE_CYCLES) / $denom))
            min: MIN(((4 * SQ_WAVE_CYCLES) / $denom))
            max: MAX(((4 * SQ_WAVE_CYCLES) / $denom))
            unit: (Cycles + $normUnit)
            tips: *Wave_Cycles_desc
          Dependency Wait Cycles:
            avg: AVG(((4 * SQ_WAIT_ANY) / $denom))
            min: MIN(((4 * SQ_WAIT_ANY) / $denom))
            max: MAX(((4 * SQ_WAIT_ANY) / $denom))
            unit: (Cycles + $normUnit)
            tips: *Dependency_Wait_Cycles_desc
          Issue Wait Cycles:
            avg: AVG(((4 * SQ_WAIT_INST_ANY) / $denom))
            min: MIN(((4 * SQ_WAIT_INST_ANY) / $denom))
            max: MAX(((4 * SQ_WAIT_INST_ANY) / $denom))
            unit: (Cycles + $normUnit)
            tips: *Issue_Wait_Cycles_desc
          Active Cycles:
            avg: AVG(((4 * SQ_ACTIVE_INST_ANY) / $denom))
            min: MIN(((4 * SQ_ACTIVE_INST_ANY) / $denom))
            max: MAX(((4 * SQ_ACTIVE_INST_ANY) / $denom))
            unit: (Cycles + $normUnit)
            tips: *Active_Cycles_desc
          Wavefront Occupancy:
            avg: AVG((SQ_ACCUM_PREV_HIRES / $GRBM_GUI_ACTIVE_PER_XCD))
            min: MIN((SQ_ACCUM_PREV_HIRES / $GRBM_GUI_ACTIVE_PER_XCD))
            max: MAX((SQ_ACCUM_PREV_HIRES / $GRBM_GUI_ACTIVE_PER_XCD))
            unit: Wavefronts
            coll_level: SQ_LEVEL_WAVES
            tips: *Wavefront_Occupancy_desc
