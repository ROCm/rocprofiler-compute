---
# Add description/tips for each metric in this section.
# So it could be shown in hover.
Metric Description:
  Speed-of-Light:
    Utilization: &SoL_Utilization_desc >-
      The ratio of the number of cycles an L2 channel was active, summed over all L2 channels on the
      accelerator over the total L2 cycles.
    Bandwidth: &SoL_Bandwidth_desc >-
      The number of bytes looked up in the L2 cache, as a percent of the peak theoretical bandwidth
      achievable on the specific accelerator. The number of bytes is calculated as the number of
      cache lines requested multiplied by the cache line size. This value does not consider partial
      requests; for example, if only a single value is requested in a cache line, the data
      movement will still be counted as a full cache line.
    Hit Rate: &SoL_Hit_Rate_desc >-
      The ratio of the number of L2 cache line requests that hit in the L2 cache over the total
      number of incoming cache line requests to the L2 cache.
    L2-Fabric Read BW: &L2-Fabric_Read_BW_desc >-
      The number of bytes read by the L2 over the Infinity Fabric interface per unit time.
    L2-Fabric Write and Atomic BW: &L2-Fabric_Write_Atomic_BW_desc >-
      The number of bytes sent by the L2 over the Infinity Fabric interface by write and atomic
      operations per unit time.
  L2-Fabric Transactions:
    Read Bandwidth: &L2-Fabric_Read_Bandwidth >-
      The total number of bytes read by the L2 cache from Infinity Fabric per normalization unit.
    HBM Read Traffic: &L2-Fabric_HBM_Read_Traffic >-
      The percent of read requests generated by the L2 cache that are routed to the accelerator's
      local high-bandwidth memory (HBM). This breakdown does not consider the size of the request
      (meaning that 32B and 64B requests are both counted as a single request), so this metric only
      approximates the percent of the L2-Fabric Read bandwidth directed to the local HBM.
    Remote Read Traffic: &L2-Fabric_Remote_Read_Traffic >-
      The percent of read requests generated by the L2 cache that are routed to any memory location
      other than the accelerator's local high-bandwidth memory (HBM) -- for example, the CPU's DRAM
      or a remote accelerator's HBM. This breakdown does not consider the size of the request
      (meaning that 32B and 64B requests are both counted as a single request), so this metric only
      approximates the percent of the L2-Fabric Read bandwidth directed to a remote location.
    Uncached Read Traffic: &L2-Fabric_Uncached_Read_Traffic >-
      The percent of read requests generated by the L2 cache that are reading from an uncached
      memory allocation. Note, as described in the request flow section, a single 64B read request
      is typically counted as two uncached read requests. So, it is possible for the Uncached Read
      Traffic to reach up to 200% of the total number of read requests. This breakdown does not
      consider the size of the request (i.e., 32B and 64B requests are both counted as a single
      request), so this metric only approximates the percent of the L2-Fabric read bandwidth
      directed to an uncached memory location.
    Write and Atomic BW: &L2-Fabric_Write_Atomic_Bandwidth >-
      The total number of bytes written by the L2 over Infinity Fabric by write and atomic
      operations per normalization unit. Note that on current CDNA accelerators, such as the MI2XX,
      requests are only considered atomic by Infinity Fabric if they are targeted at
      non-write-cacheable memory, for example, fine-grained memory allocations or uncached memory
      allocations on the MI2XX.
    HBM Write and Atomic Traffic: &L2-Fabric_HBM_Write_Atomic_Traffic >-
      The percent of write and atomic requests generated by the L2 cache that are routed to the
      accelerator's local high-bandwidth memory (HBM). This breakdown does not consider the *size*
      of the request (meaning that 32B and 64B requests are both counted as a single request), so
      this metric only *approximates* the percent of the L2-Fabric Write and Atomic bandwidth
      directed to the local HBM. Note that on current CDNA accelerators, such as the MI2XX, requests
      are only considered atomic by Infinity Fabric if they are targeted at fine-grained memory
      allocations or uncached memory allocations.
    Remote Write and Atomic Traffic: &L2-Fabric_Remote_Write_Atomic_Traffic >-
      The percent of read requests generated by the L2 cache that are routed to any memory location
      other than the accelerator's local high-bandwidth memory (HBM) -- for example, the CPU's DRAM
      or a remote accelerator's HBM. This breakdown does not consider the size of the request
      (meaning that 32B and 64B requests are both counted as a single request), so this metric only
      approximates the percent of the L2-Fabric Read bandwidth directed to a remote location. Note
      that on current CDNA accelerators, such as the MI2XX, requests are only considered atomic by
      Infinity Fabric if they are targeted at fine-grained memory allocations or uncached memory
      allocations.
    Atomic Traffic: &L2-Fabric_Atomic_Traffic >-
      The percent of write requests generated by the L2 cache that are atomic requests to any memory
      location. This breakdown does not consider the size of the request (meaning that 32B and 64B
      requests are both counted as a single request), so this metric only *approximates* the percent
      of the L2-Fabric Read bandwidth directed to a remote location. Note that on current CDNA
      accelerators, such as the MI2XX, requests are only considered atomic by Infinity Fabric if
      they are targeted at fine-grained memory allocations or uncached memory allocations.
    Uncached Write and Atomic Traffic: &L2-Fabric_Uncached_Write_Atomic_Traffic >-
      The percent of write and atomic requests generated by the L2 cache that are targeting uncached
      memory allocations. This breakdown does not consider the size of the request (meaning that 32B
      and 64B requests are both counted as a single request), so this metric only approximates the
      percent of the L2-Fabric read bandwidth directed to uncached memory allocations.
    Read Latency: &L2-Fabric_Read_Latency >-
      The time-averaged number of cycles read requests spent in Infinity Fabric before data was
      returned to the L2.
    Write Latency: &L2-Fabric_Write_Atomic_Latency >-
      The time-averaged number of cycles write requests spent in Infinity
      Fabric before a completion acknowledgement was returned to the L2.
    Atomic Latency: &L2-Fabric_Atomic_Latency >-
      The time-averaged number of cycles atomic requests spent in Infinity Fabric before a
      completion acknowledgement (atomic without return value) or data (atomic with return value)
      was returned to the L2.
    Read Stall: &L2-Fabric_Read_Stall >-
      The ratio of the total number of cycles the L2-Fabric interface was stalled on a read request
      to any destination (local HBM, remote PCIe® connected accelerator or CPU, or remote Infinity
      Fabric connected accelerator or CPU) over the total active L2 cycles.
    Write Stall: &L2-Fabric_Write_Stall
  L2 Cache Accesses:
    Bandwidth: &Accesses_Bandwidth_desc >-
     - The number of bytes looked up in the L2 cache, per
       :ref:`normalization unit <normalization-units>`.  The number of bytes is
       calculated as the number of cache lines requested multiplied by the cache
       line size. This value does not consider partial requests, so for example,
       if only a single value is requested in a cache line, the data movement
       will still be counted as a full cache line.
    Requests: &Accesses_Requests_desc >-
    Read Requests: &Accesses_Read_Requests_desc >-
    Write Requests: &Accesses_Write_Requests_desc >-
    Atomic Requests: &Accesses_Atomic_Requests_desc >-
    Streaming Requests: &Accesses_Streaming_Requests_desc >-
    Probe Requests: &Accesses_Probe_Requests_desc >-
    Cache Hit: &Accesses_Cache_Hit_desc >-
    Hits: &Accesses_Hits_desc >-
    Misses: &Accesses_Misses_desc >-
    Writeback: &Accesses_Writeback_desc >-
    Writeback (Internal): &Accesses_Writeback_Internal >-
    Writeback (vL1D Req): &Accesses_Writeback_vL1D_Req >-
    Evictions (Internal):
    Evictions (vL1D Req):
    NC Requests:
    UC Requests:
    CC Requests:
    RW Requests:
  L2-Fabric Interface Stalls:
    Read - PCIe Stall: &L2-Fabric_Read-PCIe_Stall >-
      The number of cycles the L2-Fabric interface was stalled on read requests to remote PCIe
      connected accelerators or CPUs as a percent of the total active L2 cycles.
    Read - Infinity Fabric™ Stall: &L2-Fabric_Read-Infinity_Fabric_Stall >-
      The number of cycles the L2-Fabric interface was stalled on read requests to remote Infinity
      Fabric connected accelerators or CPUs as a percent of the total active L2 cycles.
    Read - HBM Stall: &L2-Fabric_Read-HBM_Stall >-
      The number of cycles the L2-Fabric interface was stalled on read requests to the accelerator's
      local HBM as a percent of the total active L2 cycles.
    Write - PCIe Stall: &L2-Fabric_Write-PCIe_Stall >-
      The number of cycles the L2-Fabric interface was stalled on write or atomic requests to remote
      PCIe connected accelerators or CPUs as a percent of the total active L2 cycles.
    Write - Infinity Fabric™ Stall: &L2-Fabric_Write-Infinity_Fabric_Stall >-
      The number of cycles the L2-Fabric interface was stalled on write or atomic requests to remote
      Infinity Fabric connected accelerators or CPUs as a percent of the total active L2 cycles.
    Write - HBM Stall: &L2-Fabric_Write-HBM_Stall >-
      The number of cycles the L2-Fabric interface was stalled on write or atomic requests to
      accelerator's local HBM as a percent of the total active L2 cycles.
    Write - Credit Starvation: &L2-Fabric_Write-Credit_Starvation >-
      The number of cycles the L2-Fabric interface was stalled on write or atomic requests to any
      memory location because too many write/atomic requests were currently in flight, as a percent
      of the total active L2 cycles.
  L2-Fabric Detailed Transaction Breakdown:
    Read (32B): &L2-Fabric_Read_Requests_32B >-
      The total number of L2 requests to Infinity Fabric to read 32B of data from any memory
      location, per normalization unit. Typically unused on CDNA accelerators.
    Read (Uncached): &L2-Fabric_Read_Requests_Uncached >-
      The total number of L2 requests to Infinity Fabric to read uncached data from any memory
      location, per normalization unit. 64B requests for uncached data are counted as two 32B
      uncached data requests.
    Read (64B): &L2-Fabric_Read_Requests_64B >-
      The total number of L2 requests to Infinity Fabric to read 64B of data from any memory
      location, per normalization unit.
    HBM Read: &L2-Fabric_HBM_Read_Requests >-
      The total number of L2 requests to Infinity Fabric to read 32B or 64B of data from the
      accelerator's local HBM, per normalization unit.
    Remote Read: &L2-Fabric_Remote_Read_Requests >-
      The total number of L2 requests to Infinity Fabric to read 32B or 64B of data from any source
      other than the accelerator's local HBM, per normalization unit.
    Write and Atomic (32B): &L2-Fabric_Write_Atomic_Requests_32B >-
      The total number of L2 requests to Infinity Fabric to write or atomically update 32B of data
      to any memory location, per normalization unit.
    Write and Atomic (Uncached): &L2-Fabric_Write_Atomic_Requests_Uncached >-
      The total number of L2 requests to Infinity Fabric to write or atomically update 32B or 64B of
      uncached data, per normalization unit.
    Write and Atomic (64B): &L2-Fabric_Write_Atomic_Requests_64B >-
      The total number of L2 requests to Infinity Fabric to write or atomically update 64B of data
      in any memory location, per normalization unit.
    HBM Write and Atomic: &L2-Fabric_HBM_Write_Atomic_Requests >-
      The total number of L2 requests to Infinity Fabric to write or atomically update 32B or 64B of
      data in the accelerator's local HBM, per normalization unit.
    Remote Write and Atomic: &L2-Fabric_Remote_Write_Atomic_Requests >-
      The total number of L2 requests to Infinity Fabric to write or atomically update 32B or 64B of
      data in any memory location other than the accelerator's local HBM, per normalization unit.
    Atomic: &L2-Fabric_Write_Atomic_Requests >-
      The total number of L2 requests to Infinity Fabric to atomically update 32B or 64B of data in
      any memory location, per normalization unit. Note that on current CDNA accelerators, such as
      the MI2XX, requests are only considered atomic by Infinity Fabric if they are targeted at
      non-write-cacheable memory, such as fine-grained memory allocations or uncached memory
      allocations on the MI2XX.
  Footnotes:
    - &Infinity_Fabric_footnote >-
      In addition to being used for on-accelerator data-traffic, AMD Infinity Fabric technology can
      be used to connect multiple accelerators to achieve advanced peer-to-peer connectivity and
      enhanced bandwidths over traditional PCIe connections. Some AMD Instinct MI-series
      accelerators like the MI250X feature coherent CPU↔accelerator connections built using AMD
      Infinity Fabric.

# Define the panel properties and properties of each metric in the panel.
Panel Config:
  id: 1700
  title: L2 Cache
  data source:
    - metric_table:
        id: 1701
        title: Speed-of-Light
        header:
          metric: Metric
          value: Avg
          unit: Unit
          tips: Tips
        metric:
          Utilization:
            value: AVG(((TCC_BUSY_sum * 100) / (TO_INT($total_l2_chan) * $GRBM_GUI_ACTIVE_PER_XCD)))
            unit: pct
            tips:
          Bandwidth:
            value: ((100 * AVG(((TCC_REQ_sum * 128) / (End_Timestamp - Start_Timestamp)))) / ((($max_sclk / 1000) * 128) * TO_INT($total_l2_chan)))
            unit: pct
            tips:
          Hit Rate:
            value: AVG((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
              + TCC_MISS_sum) != 0) else 0))
            unit: pct
            tips:
          L2-Fabric Read BW:
            value: AVG((((TCC_EA_RDREQ_32B_sum * 32) + ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum)
              * 64)) / (End_Timestamp - Start_Timestamp)))
            unit: GB/s
            tips:
          L2-Fabric Write and Atomic BW:
            value: AVG((((TCC_EA_WRREQ_64B_sum * 64) + ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum)
              * 32)) / (End_Timestamp - Start_Timestamp)))
            unit: GB/s
            tips:

    - metric_table:
        id: 1702
        title: L2 - Fabric Transactions
        header:
          metric: Metric
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        metric:
          Read BW:
            avg: AVG((((TCC_EA_RDREQ_32B_sum * 32) + ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum)
              * 64)) / $denom))
            min: MIN((((TCC_EA_RDREQ_32B_sum * 32) + ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum)
              * 64)) / $denom))
            max: MAX((((TCC_EA_RDREQ_32B_sum * 32) + ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum)
              * 64)) / $denom))
            unit: (Bytes  + $normUnit)
            tips:
          HBM Read Traffic:
            avg: AVG((100 * (TCC_EA_RDREQ_DRAM_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            min: MIN((100 * (TCC_EA_RDREQ_DRAM_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            max: MAX((100 * (TCC_EA_RDREQ_DRAM_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            unit: pct
            tips:
          Remote Read Traffic:
            avg: AVG((100 * ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_DRAM_sum) / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            min: MIN((100 * ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_DRAM_sum) / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            max: MAX((100 * ((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_DRAM_sum) / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            unit: pct
            tips:
          Uncached Read Traffic:
            avg: AVG((100 * (TCC_EA_RD_UNCACHED_32B_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            min: MIN((100 * (TCC_EA_RD_UNCACHED_32B_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            max: MAX((100 * (TCC_EA_RD_UNCACHED_32B_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum != 0) else None))
            unit: pct
            tips:
          Write and Atomic BW:
            avg: AVG((((TCC_EA_WRREQ_64B_sum * 64) + ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum)
              * 32)) / $denom))
            min: MIN((((TCC_EA_WRREQ_64B_sum * 64) + ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum)
              * 32)) / $denom))
            max: MAX((((TCC_EA_WRREQ_64B_sum * 64) + ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum)
              * 32)) / $denom))
            unit: (Bytes  + $normUnit)
            tips:
          HBM Write and Atomic Traffic:
            avg: AVG((100 * (TCC_EA_WRREQ_DRAM_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            min: MIN((100 * (TCC_EA_WRREQ_DRAM_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            max: MAX((100 * (TCC_EA_WRREQ_DRAM_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            unit: pct
            tips:
          Remote Write and Atomic Traffic:
            avg: AVG((100 * ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_DRAM_sum) / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            min: MIN((100 * ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_DRAM_sum) / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            max: MAX((100 * ((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_DRAM_sum) / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            unit: pct
            tips:
          Atomic Traffic:
            avg: AVG((100 * (TCC_EA_ATOMIC_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            min: MIN((100 * (TCC_EA_ATOMIC_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            max: MAX((100 * (TCC_EA_ATOMIC_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            unit: pct
            tips:
          Uncached Write and Atomic Traffic:
            avg: AVG((100 * (TCC_EA_WR_UNCACHED_32B_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            min: MIN((100 * (TCC_EA_WR_UNCACHED_32B_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            max: MAX((100 * (TCC_EA_WR_UNCACHED_32B_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum != 0) else None))
            unit: pct
            tips:
          Read Latency:
            avg: AVG(((TCC_EA_RDREQ_LEVEL_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum !=
              0) else None))
            min: MIN(((TCC_EA_RDREQ_LEVEL_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum !=
              0) else None))
            max: MAX(((TCC_EA_RDREQ_LEVEL_sum / TCC_EA_RDREQ_sum) if (TCC_EA_RDREQ_sum !=
              0) else None))
            unit: Cycles
            tips:
          Write and Atomic Latency:
            avg: AVG(((TCC_EA_WRREQ_LEVEL_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum !=
              0) else None))
            min: MIN(((TCC_EA_WRREQ_LEVEL_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum !=
              0) else None))
            max: MAX(((TCC_EA_WRREQ_LEVEL_sum / TCC_EA_WRREQ_sum) if (TCC_EA_WRREQ_sum !=
              0) else None))
            unit: Cycles
            tips:
          Atomic Latency:
            avg: AVG(((TCC_EA_ATOMIC_LEVEL_sum / TCC_EA_ATOMIC_sum) if (TCC_EA_ATOMIC_sum
              != 0) else None))
            min: MIN(((TCC_EA_ATOMIC_LEVEL_sum / TCC_EA_ATOMIC_sum) if (TCC_EA_ATOMIC_sum
              != 0) else None))
            max: MAX(((TCC_EA_ATOMIC_LEVEL_sum / TCC_EA_ATOMIC_sum) if (TCC_EA_ATOMIC_sum
              != 0) else None))
            unit: Cycles
            tips:
          Read Stall:
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Write Stall:
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:

    - metric_table:
        id: 1703
        title: L2 Cache Accesses
        header:
          metric: Metric
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        metric:
          Bandwidth:
            avg: AVG((TCC_REQ_sum * 128) / $denom)
            min: MIN((TCC_REQ_sum * 128) / $denom)
            max: MAX((TCC_REQ_sum * 128) / $denom)
            unit: (Bytes + $normUnit)
            tips:
          Req:
            avg: AVG((TCC_REQ_sum / $denom))
            min: MIN((TCC_REQ_sum / $denom))
            max: MAX((TCC_REQ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Read Req:
            avg: AVG((TCC_READ_sum / $denom))
            min: MIN((TCC_READ_sum / $denom))
            max: MAX((TCC_READ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Write Req:
            avg: AVG((TCC_WRITE_sum / $denom))
            min: MIN((TCC_WRITE_sum / $denom))
            max: MAX((TCC_WRITE_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Atomic Req:
            avg: AVG((TCC_ATOMIC_sum / $denom))
            min: MIN((TCC_ATOMIC_sum / $denom))
            max: MAX((TCC_ATOMIC_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Streaming Req:
            avg: AVG((TCC_STREAMING_REQ_sum / $denom))
            min: MIN((TCC_STREAMING_REQ_sum / $denom))
            max: MAX((TCC_STREAMING_REQ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Probe Req:
            avg: AVG((TCC_PROBE_sum / $denom))
            min: MIN((TCC_PROBE_sum / $denom))
            max: MAX((TCC_PROBE_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Cache Hit:
            avg: AVG((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
              + TCC_MISS_sum) != 0) else None))
            min: MIN((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
              + TCC_MISS_sum) != 0) else None))
            max: MAX((((100 * TCC_HIT_sum) / (TCC_HIT_sum + TCC_MISS_sum)) if ((TCC_HIT_sum
              + TCC_MISS_sum) != 0) else None))
            unit: pct
            tips:
          Hits:
            avg: AVG((TCC_HIT_sum / $denom))
            min: MIN((TCC_HIT_sum / $denom))
            max: MAX((TCC_HIT_sum / $denom))
            unit: (Hits  + $normUnit)
            tips:
          Misses:
            avg: AVG((TCC_MISS_sum / $denom))
            min: MIN((TCC_MISS_sum / $denom))
            max: MAX((TCC_MISS_sum / $denom))
            unit: (Misses  + $normUnit)
            tips:
          Writeback:
            avg: AVG((TCC_WRITEBACK_sum / $denom))
            min: MIN((TCC_WRITEBACK_sum / $denom))
            max: MAX((TCC_WRITEBACK_sum / $denom))
            unit: (Cachelines  + $normUnit)
            tips:
          Writeback (Internal):
            avg: AVG((TCC_NORMAL_WRITEBACK_sum / $denom))
            min: MIN((TCC_NORMAL_WRITEBACK_sum / $denom))
            max: MAX((TCC_NORMAL_WRITEBACK_sum / $denom))
            unit: (Cachelines + $normUnit)
            tips:
          Writeback (vL1D Req):
            avg: AVG((TCC_ALL_TC_OP_WB_WRITEBACK_sum / $denom))
            min: MIN((TCC_ALL_TC_OP_WB_WRITEBACK_sum / $denom))
            max: MAX((TCC_ALL_TC_OP_WB_WRITEBACK_sum / $denom))
            unit: (Cachelines + $normUnit)
            tips:
          Evict (Internal):
            avg: AVG((TCC_NORMAL_EVICT_sum / $denom))
            min: MIN((TCC_NORMAL_EVICT_sum / $denom))
            max: MAX((TCC_NORMAL_EVICT_sum / $denom))
            unit: (Cachelines + $normUnit)
            tips:
          Evict (vL1D Req):
            avg: AVG((TCC_ALL_TC_OP_INV_EVICT_sum / $denom))
            min: MIN((TCC_ALL_TC_OP_INV_EVICT_sum / $denom))
            max: MAX((TCC_ALL_TC_OP_INV_EVICT_sum / $denom))
            unit: (Cachelines + $normUnit)
            tips:
          NC Req:
            avg: AVG((TCC_NC_REQ_sum / $denom))
            min: MIN((TCC_NC_REQ_sum / $denom))
            max: MAX((TCC_NC_REQ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          UC Req:
            avg: AVG((TCC_UC_REQ_sum / $denom))
            min: MIN((TCC_UC_REQ_sum / $denom))
            max: MAX((TCC_UC_REQ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          CC Req:
            avg: AVG((TCC_CC_REQ_sum / $denom))
            min: MIN((TCC_CC_REQ_sum / $denom))
            max: MAX((TCC_CC_REQ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          RW Req:
            avg: AVG((TCC_RW_REQ_sum / $denom))
            min: MIN((TCC_RW_REQ_sum / $denom))
            max: MAX((TCC_RW_REQ_sum / $denom))
            unit: (Req  + $normUnit)
            tips:

    - metric_table:
        id: 1704
        title: L2 - Fabric Interface Stalls
        header:
          metric: Metric
          type: Type
          transaction: Transaction
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        style:
          type: simple_multi_bar
        metric:
          Read - PCIe Stall:
            type: PCIe Stall
            transaction: Read
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Read - Infinity Fabric™ Stall:
            type: Infinity Fabric™ Stall
            transaction: Read
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Read - HBM Stall:
            type: HBM Stall
            transaction: Read
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Write - PCIe Stall:
            type: PCIe Stall
            transaction: Write
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Write - Infinity Fabric™ Stall:
            type: Infinity Fabric™ Stall
            transaction: Write
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Write - HBM Stall:
            type: HBM Stall
            transaction: Write
            avg: None # Missing perfmon
            min: None # Missing perfmon
            max: None # Missing perfmon
            unit: pct
            tips:
          Write - Credit Starvation:
            type: Credit Starvation
            transaction: Write
            avg: AVG(((100 * (TCC_TOO_MANY_EA_WRREQS_STALL_sum / TCC_BUSY_sum)) if (TCC_BUSY_sum != 0) else None))
            min: MIN(((100 * (TCC_TOO_MANY_EA_WRREQS_STALL_sum / TCC_BUSY_sum)) if (TCC_BUSY_sum != 0) else None))
            max: MAX(((100 * (TCC_TOO_MANY_EA_WRREQS_STALL_sum / TCC_BUSY_sum)) if (TCC_BUSY_sum != 0) else None))
            unit: pct
            tips:

    - metric_table:
        id: 1705
        title: L2 - Fabric Detailed Transaction Breakdown
        header:
          metric: Metric
          avg: Avg
          min: Min
          max: Max
          unit: Unit
          tips: Tips
        metric:
          Read (32B):
            avg: AVG((TCC_EA_RDREQ_32B_sum / $denom))
            min: MIN((TCC_EA_RDREQ_32B_sum / $denom))
            max: MAX((TCC_EA_RDREQ_32B_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Read (Uncached):
            avg: AVG((TCC_EA_RD_UNCACHED_32B_sum / $denom))
            min: MIN((TCC_EA_RD_UNCACHED_32B_sum / $denom))
            max: MAX((TCC_EA_RD_UNCACHED_32B_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Read (64B):
            avg: AVG(((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum) / $denom))
            min: MIN(((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum) / $denom))
            max: MAX(((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_32B_sum) / $denom))
            unit: (Req  + $normUnit)
            tips:
          HBM Read:
            avg: AVG((TCC_EA_RDREQ_DRAM_sum / $denom))
            min: MIN((TCC_EA_RDREQ_DRAM_sum / $denom))
            max: MAX((TCC_EA_RDREQ_DRAM_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Remote Read:
            avg: AVG((MAX((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_DRAM_sum), 0) / $denom))
            min: MIN((MAX((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_DRAM_sum), 0) / $denom))
            max: MAX((MAX((TCC_EA_RDREQ_sum - TCC_EA_RDREQ_DRAM_sum), 0) / $denom))
            unit: (Req  + $normUnit)
            tips:
          Write and Atomic (32B):
            avg: AVG(((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum) / $denom))
            min: MIN(((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum) / $denom))
            max: MAX(((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_64B_sum) / $denom))
            unit: (Req  + $normUnit)
            tips:
          Write and Atomic (Uncached):
            avg: AVG((TCC_EA_WR_UNCACHED_32B_sum / $denom))
            min: MIN((TCC_EA_WR_UNCACHED_32B_sum / $denom))
            max: MAX((TCC_EA_WR_UNCACHED_32B_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Write and Atomic (64B):
            avg: AVG((TCC_EA_WRREQ_64B_sum / $denom))
            min: MIN((TCC_EA_WRREQ_64B_sum / $denom))
            max: MAX((TCC_EA_WRREQ_64B_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          HBM Write and Atomic:
            avg: AVG((TCC_EA_WRREQ_DRAM_sum / $denom))
            min: MIN((TCC_EA_WRREQ_DRAM_sum / $denom))
            max: MAX((TCC_EA_WRREQ_DRAM_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
          Remote Write and Atomic:
            avg: AVG((MAX((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_DRAM_sum), 0) / $denom))
            min: MIN((MAX((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_DRAM_sum), 0) / $denom))
            max: MAX((MAX((TCC_EA_WRREQ_sum - TCC_EA_WRREQ_DRAM_sum), 0) / $denom))
            unit: (Req  + $normUnit)
            tips:
          Atomic:
            avg: AVG((TCC_EA_ATOMIC_sum / $denom))
            min: MIN((TCC_EA_ATOMIC_sum / $denom))
            max: MAX((TCC_EA_ATOMIC_sum / $denom))
            unit: (Req  + $normUnit)
            tips:
